{"version":3,"names":["irCheckboxCss","IrCheckBox","this","handleInputChange","disabled","checked","checkboxChange","emit","name","value","render","h","class","labelPosition","label","type","onInput"],"sources":["src/components/ir-checkbox/ir-checkbox.css?tag=ir-checkbox","src/components/ir-checkbox/ir-checlbox.tsx"],"sourcesContent":["/* custome checkbox */\n.check-container {\n  display: block;\n  position: relative;\n  /* padding-left: 30px; */\n  cursor: pointer;\n  font-size: 14px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  display: flex;\n  align-items: center;\n}\n.check-container input {\n  position: relative;\n  opacity: 0;\n  cursor: pointer;\n  height: 0;\n  width: 0;\n}\n.check-container .checkmark {\n  position: relative;\n  top: 0;\n  left: 0;\n  height: 20px;\n  width: 20px;\n  border: 1px solid #cacfe7;\n  border-radius: 4px;\n  transition: all 0.3s ease;\n}\n.check-container input:checked ~ .checkmark {\n  background-color: #1e9ff2;\n  border-color: #1e9ff2;\n}\n.checkmark:after {\n  content: '';\n  position: absolute;\n  display: none;\n}\n.check-container input:checked ~ .checkmark:after {\n  display: block;\n}\n.check-container .checkmark:after {\n  left: 6px;\n  top: 3px;\n  width: 6px;\n  height: 10px;\n  border: solid white;\n  border-width: 0 2px 2px 0;\n  -webkit-transform: rotate(45deg);\n  -ms-transform: rotate(45deg);\n  transform: rotate(45deg);\n}\n.check-container.before span:last-child,\n.check-container.after span:first-child {\n  margin-right: 8px;\n}\n\n.check-container.after span:last-child {\n  margin-left: 8px;\n}\n","import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\n\n@Component({\n  tag: 'ir-checkbox',\n  styleUrl: 'ir-checkbox.css',\n})\nexport class IrCheckBox {\n  @Prop() name: string;\n  @Prop({ mutable: true, reflect: true }) checked: boolean = false;\n  @Prop() label: string = '<label>';\n  @Prop() disabled: boolean = false;\n  @Prop() value: string; // Added value property\n  @Prop() labelPosition: 'before' | 'after' = 'after'; // Added labelPosition property\n\n  @Event({ bubbles: true, composed: true }) checkboxChange: EventEmitter<{ name: string; value: string; checked: boolean }>;\n\n  handleInputChange = () => {\n    if (!this.disabled) {\n      this.checked = !this.checked;\n      this.checkboxChange.emit({ name: this.name, value: this.value, checked: this.checked });\n    }\n  };\n\n  render() {\n    return (\n      <label class={`check-container ${this.labelPosition}`}>\n        {this.labelPosition === 'before' && <span>{this.label}</span>}\n        <input type=\"checkbox\" name={this.name} value={this.value} checked={this.checked} disabled={this.disabled} onInput={this.handleInputChange} />\n        <span class=\"checkmark\"></span>\n        {this.labelPosition === 'after' && <span>{this.label}</span>}\n      </label>\n    );\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAgB,k+B,MCMTC,EAAU,M,wEAUrBC,KAAAC,kBAAoB,KAClB,IAAKD,KAAKE,SAAU,CAClBF,KAAKG,SAAWH,KAAKG,QACrBH,KAAKI,eAAeC,KAAK,CAAEC,KAAMN,KAAKM,KAAMC,MAAOP,KAAKO,MAAOJ,QAASH,KAAKG,S,oCAXtB,M,WACnC,U,cACI,M,wCAEgB,O,CAW5C,MAAAK,GACE,OACEC,EAAA,SAAOC,MAAO,mBAAmBV,KAAKW,iBACnCX,KAAKW,gBAAkB,UAAYF,EAAA,YAAOT,KAAKY,OAChDH,EAAA,SAAOI,KAAK,WAAWP,KAAMN,KAAKM,KAAMC,MAAOP,KAAKO,MAAOJ,QAASH,KAAKG,QAASD,SAAUF,KAAKE,SAAUY,QAASd,KAAKC,oBACzHQ,EAAA,QAAMC,MAAM,cACXV,KAAKW,gBAAkB,SAAWF,EAAA,YAAOT,KAAKY,O"}