{"version":3,"names":["irCheckboxCss","IrCheckBox","this","handleInputChange","disabled","checked","checkboxChange","emit","name","value","render","h","class","labelPosition","label","type","onInput"],"sources":["src/components/ir-checkbox/ir-checkbox.css?tag=ir-checkbox","src/components/ir-checkbox/ir-checlbox.tsx"],"sourcesContent":["/* custome checkbox */\r\n.check-container {\r\n  display: block;\r\n  position: relative;\r\n  /* padding-left: 30px; */\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n.check-container input {\r\n  position: relative;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  height: 0;\r\n  width: 0;\r\n}\r\n.check-container .checkmark {\r\n  position: relative;\r\n  top: 0;\r\n  left: 0;\r\n  height: 20px;\r\n  width: 20px;\r\n  border: 1px solid #cacfe7;\r\n  border-radius: 4px;\r\n  transition: all 0.3s ease;\r\n}\r\n.check-container input:checked ~ .checkmark {\r\n  background-color: #1e9ff2;\r\n  border-color: #1e9ff2;\r\n}\r\n.checkmark:after {\r\n  content: '';\r\n  position: absolute;\r\n  display: none;\r\n}\r\n.check-container input:checked ~ .checkmark:after {\r\n  display: block;\r\n}\r\n.check-container .checkmark:after {\r\n  left: 6px;\r\n  top: 3px;\r\n  width: 6px;\r\n  height: 10px;\r\n  border: solid white;\r\n  border-width: 0 2px 2px 0;\r\n  -webkit-transform: rotate(45deg);\r\n  -ms-transform: rotate(45deg);\r\n  transform: rotate(45deg);\r\n}\r\n.check-container.before span:last-child,\r\n.check-container.after span:first-child {\r\n  margin-right: 8px;\r\n}\r\n\r\n.check-container.after span:last-child {\r\n  margin-left: 8px;\r\n}\r\n","import { Component, Prop, h, Event, EventEmitter } from '@stencil/core';\r\n\r\n@Component({\r\n  tag: 'ir-checkbox',\r\n  styleUrl: 'ir-checkbox.css',\r\n})\r\nexport class IrCheckBox {\r\n  @Prop() name: string;\r\n  @Prop({ mutable: true, reflect: true }) checked: boolean = false;\r\n  @Prop() label: string = '<label>';\r\n  @Prop() disabled: boolean = false;\r\n  @Prop() value: string; // Added value property\r\n  @Prop() labelPosition: 'before' | 'after' = 'after'; // Added labelPosition property\r\n\r\n  @Event({ bubbles: true, composed: true }) checkboxChange: EventEmitter<{ name: string; value: string; checked: boolean }>;\r\n\r\n  handleInputChange = () => {\r\n    if (!this.disabled) {\r\n      this.checked = !this.checked;\r\n      this.checkboxChange.emit({ name: this.name, value: this.value, checked: this.checked });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <label class={`check-container ${this.labelPosition}`}>\r\n        {this.labelPosition === 'before' && <span>{this.label}</span>}\r\n        <input type=\"checkbox\" name={this.name} value={this.value} checked={this.checked} disabled={this.disabled} onInput={this.handleInputChange} />\r\n        <span class=\"checkmark\"></span>\r\n        {this.labelPosition === 'after' && <span>{this.label}</span>}\r\n      </label>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"kDAAA,MAAMA,EAAgB,k+B,MCMTC,EAAU,M,wEAUrBC,KAAAC,kBAAoB,KAClB,IAAKD,KAAKE,SAAU,CAClBF,KAAKG,SAAWH,KAAKG,QACrBH,KAAKI,eAAeC,KAAK,CAAEC,KAAMN,KAAKM,KAAMC,MAAOP,KAAKO,MAAOJ,QAASH,KAAKG,S,oCAXtB,M,WACnC,U,cACI,M,wCAEgB,O,CAW5C,MAAAK,GACE,OACEC,EAAA,SAAOC,MAAO,mBAAmBV,KAAKW,iBACnCX,KAAKW,gBAAkB,UAAYF,EAAA,YAAOT,KAAKY,OAChDH,EAAA,SAAOI,KAAK,WAAWP,KAAMN,KAAKM,KAAMC,MAAOP,KAAKO,MAAOJ,QAASH,KAAKG,QAASD,SAAUF,KAAKE,SAAUY,QAASd,KAAKC,oBACzHQ,EAAA,QAAMC,MAAM,cACXV,KAAKW,gBAAkB,SAAWF,EAAA,YAAOT,KAAKY,O"}